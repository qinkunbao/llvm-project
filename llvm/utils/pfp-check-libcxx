#!/bin/sh -xe

shopt -s globstar

tc="$(cd $(dirname $0)/../../ra && pwd)"

mtime_before="$(stat -c %Y $tc/bin/clang || true)"
ninja -C $tc clang
mtime_after="$(stat -c %Y $tc/bin/clang)"
if [ "$mtime_before" != "$mtime_after"  ] ; then
  rm -f $tc/stage2_*/**/*.o
fi
ninja -C $tc libcxx

cflags=$(grep COMPILER_RT_TEST_COMPILER_CFLAGS= $tc/stage2_unix/toolchain.ninja | sed -e 's/\\\$ /:/g' | grep -o COMPILER_RT_TEST_COMPILER_CFLAGS='[^ ]*' | sed -e 's/:/ /g' | cut -d= -f2-)
cflags="$cflags -Wno-unused-command-line-argument"

mkdir -p $tc/check-libcxx
cat > $tc/check-libcxx/lit.site.cfg <<LIT
# This testing configuration handles running the test suite against LLVM's libc++
# using a static library.

lit_config.load_config(config, '$tc/check-libcxx/cmake-bridge.cfg')

config.substitutions.append(('%{flags}',
    '-pthread'
))
config.substitutions.append(('%{compile_flags}',
    '-nostdinc++ -I %{include-dir} -I %{target-include-dir} -I %{libcxx-dir}/test/support $cflags'
))
config.substitutions.append(('%{link_flags}',
    '-nostdlib++ -L %{lib-dir} -Wl,-Bstatic -lc++ -lc++abi -Wl,-Bdynamic --rtlib=compiler-rt --unwindlib=libunwind -static-libgcc -static-libstdc++ -stdlib=libc++ -fuse-ld=lld'
))
config.substitutions.append(('%{exec}',
    '%{executor} --execdir %T -- '
))

import os, site
site.addsitedir(os.path.join('@LIBCXX_SOURCE_DIR@', 'utils'))
import libcxx.test.params, libcxx.test.config
libcxx.test.config.configure(
    libcxx.test.params.DEFAULT_PARAMETERS,
    libcxx.test.features.DEFAULT_FEATURES,
    config,
    lit_config
)
LIT

cat > $tc/check-libcxx/cmake-bridge.cfg <<LIT
## Autogenerated by libcxx configuration.
# Do not edit!

# Lit parameters serialized here for llvm-lit to pick them up
config.compiler = "$tc/bin/clang++"
config.hardening_mode = "extensive"
config.target_triple = "aarch64-unknown-linux-gnu"


#
# This file performs the bridge between the CMake configuration and the Lit
# configuration files by setting up the LitConfig object and various Lit
# substitutions from CMake variables.
#
# Individual configuration files can take advantage of this bridge by
# loading the file and then setting up the remaining Lit substitutions.
#

import os, site
site.addsitedir(os.path.join('$tc/../libcxx', 'utils'))
import libcxx.test.format

# Basic configuration of the test suite
config.name = os.path.basename('$tc/../libcxx/test/configs/llvm-libc++-static.cfg.in')
config.test_source_root = os.path.join('$tc/../libcxx', 'test')
config.test_format = libcxx.test.format.CxxStandardLibraryTest()
config.recursiveExpansionLimit = 10
config.test_exec_root = '$tc/check-libcxx'

# Add substitutions for bootstrapping the test suite configuration
config.substitutions.append(('%{libcxx-dir}', '$tc/../libcxx'))
config.substitutions.append(('%{install-prefix}', '$tc'))
config.substitutions.append(('%{include-dir}', '$tc/include/c++/v1'))
config.substitutions.append(('%{target-include-dir}', '$tc/include/aarch64-unknown-linux-gnu/c++/v1'))
config.substitutions.append(('%{lib-dir}', '$tc/lib'))
config.substitutions.append(('%{module-dir}', '$tc/share/libc++/v1'))
config.substitutions.append(('%{test-tools-dir}', '$tc/../libcxx/test/tools'))
config.substitutions.append(('%{benchmark_flags}', ''))
LIT

$tc/bin/llvm-lit -sv $tc/check-libcxx --param enable_benchmarks=no --filter-out /modules/
